# -*- coding: utf-8 -*-

import sys
import tweepy
import webbrowser
import pprint
from tweepy import Cursor

# Query terms

u_id = sys.argv[1:] 
f = open(u_id[0],'a')

#Q = ["news","breaking news","News","Breaking News","BREAKING NEWS","Politics","POLITICS","BreakingNews","NEWS","WORLD","BUSINESS","TECHNOLOGY","ENTERTAINMENT","SPORTS","SCIENCE","HEALTH","Enetertainment","Sports","Science","Health"]

# Get these values from your application settings.

CONSUMER_KEY = "Ll0HHLMotb4zxsXEahZbWw"
CONSUMER_SECRET = "mObYZaX05NN6WvWxSMMpWAjVZDcO9o80QG62N4QHL0"

# Get these values from the "My Access Token" link located in the
# margin of your application details, or perform the full OAuth
# dance.
ACCESS_TOKEN = "802182307-pu5gPlCCYdNbGSmD9Joar6f8EmaDomfTvCTSIScI"
ACCESS_TOKEN_SECRET = "v8saE2br55dtSY2IwSKLnhl8DmwlFb44M9lcng3kQl4"

auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)
api = tweepy.API(auth)

# Note: Had you wanted to perform the full OAuth dance instead of using
# an access key and access secret, you could have uses the following 
# four lines of code instead of the previous line that manually set the
# access token via auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET).
# 
# auth_url = auth.get_authorization_url(signin_with_twitter=True)
# webbrowser.open(auth_url)
# verifier = raw_input('PIN: ').strip()
# auth.get_access_token(verifier)

class CustomStreamListener(tweepy.StreamListener):

    def on_status(self, status):
        
        # We'll simply print some values in a tab-delimited format
        # suitable for capturing to a flat file but you could opt 
        # store them elsewhere, retweet select statuses, etc.



        try:
            '''print "%s\t%s\t%s\t%s\n%s\n\n" % (status.text, 
                                            status.author.screen_name, 
                                      status.created_at, 
                                      status.source,
                                      status.entities)'''

            for url in status.entities['urls'] :
                '''print url['expanded_url']'''
                f.write(url['expanded_url'])
                f.write("\n")
        except Exception, e:
            print >> sys.stderr, 'Encountered Exception:', e
            pass

    def on_error(self, status_code):
        print >> sys.stderr, 'Encountered error with status code:', status_code
        return True # Don't kill the stream

    def on_timeout(self):
        print >> sys.stderr, 'Timeout...'
        return True # Don't kill the stream

# Create a streaming API and set a timeout value of 60 seconds.

for status in Cursor(api.user_timeline, id = "_prateekmehta" ).items():
    # process status here
    f.write(status)
    print status

